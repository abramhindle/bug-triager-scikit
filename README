=== Text Learner Bug Triagers ===

This project implements a few simple bug triagers. They should act on text data to guesstimate the assignees for the bugs.

The learning parts are in python3

=== Expectations ===

It expects that you mirrored a github repo in the data directory

e.g. you ran mkdir data; bash -x get-big.sh

Then you ran the triager on the large.json files by

    cd data
    bash summarize.sh
    bash means.sh

=== Learners ===

MultiNaiveBayesNB should be similar to the work by Anvik et al. on triaging. It uses 1 NaiveBayes classifier per assignee.

NaiveBayesNB is a classifier and it keeps a corpus for each label (assignee) but it is half of the complexity of MultiNaiveBayesNB.

ZeroR is not quite ZeroR but it is a static ranking of assignees from the training set ordered by who was assigned the most bugs.

SVM is SVC from scikit-learn, it uses a simple linear kernel I think.

Random is 100% random 100% of the time. Just a shuffling of orders.

=== Evaluation Measures ===

* Top1 -- how often the first ranked result is the correct one. This is similar to a single > 2-class classifier

* Top5 -- how often the right assignee is in the top5

* MRR -- Mean Reciprocal Rank -- 1.0 is perfect, 0.5 is 50% in the first 2, 0.25 is in the first 4 and so on.

=== Current Results ===

On 16 projects: angular.js brackets bundler edx-platform elasticsearch fog framework gaia Ghost julia rails salt scala travis-ci www.html5rocks.com yui3

    SVM MRR 0.401917
    SVM Top1 0.235659
    SVM Top5 0.596484
    ZeroR MRR 0.421576
    ZeroR Top1 0.241504
    ZeroR Top5 0.635401
    Random MRR 0.143814
    Random Top1 0.0359856
    Random Top5 0.190077
    MultiNaiveBayesNB MRR 0.691587
    MultiNaiveBayesNB Top1 0.537964
    MultiNaiveBayesNB Top5 0.897886
    NaiveBayesNB MRR 0.658102
    NaiveBayesNB Top1 0.497915
    NaiveBayesNB Top5 0.873365



=== GitHub Issue Tracker LDA Summarizer ===

Using the powers of code cloning this repo is based on an LDA repo.

=== Use ===

To mirror the repo run:

bash gh.sh USERNAME / REPO 

after editing config.json to look something like

    {
         "GHUSERNAME":"yourgithubaccount",
         "GHPASSWORD":"thepasswordtoyourgithubaccount"
    }

an out directory will be made, a Everything.svg generated in the base dir.

To use existing data:

python lda_from_json.py --file data/boostrap/large.json --passes 10 --alpha 0.01 --beta 0.01 --topics 20

=== Deps ===

A lot of libraries :(

- Vowpal Wabbit
- Ruby
  - Octokit
- R
  - zoo

In ubuntu 14.04:

sudo apt-get update
sudo apt-get install git r-cran-zoo r-cran-zoo ruby curl vim-gnome r-cran-zoo r-base-core python-nltk build-essential vowpal-wabbit libxml-xpath-perl libxml-dom-perl libjson-perl emacs24
sudo gem install octokit
sudo cpan -f VCI

in R you can optionally install:
    
   install.packages("corrplot")
   install.packages("doMC")
   install.packages("foreach")

=== Files ===

bug-tracker-to-json.pl - convert an issues.xml to an appropriate format
git-grep.pl - convert a git repo to an appropriate format
lda_from_json.py - run lda on issues and commits 
lda.py - lda lib
lda-to-csv.pl - convert lda output to csv for R
plotter.R - R to make plots and run the study
project.sh - how to extract a project in the data directory

=== LICENSE ===

In general:

(C) 2013 Abram Hindle

All code here is licensed under the Apache 2.0 unless otherwise specified.

Furthermore if you are an academic. Cite our work! 

@inproceedings{hindle2012rri,
	Author = {Abram Hindle and Christian Bird and Thomas Zimmermann and Nachiappan Nagappan},
	Title = {Relating Requirements to Implementation via Topic Analysis: Do Topics Extracted from Requirements Make Sense to Managers and Developers?},
	Booktitle = {Proceedings of the 28th IEEE International Conference on Software Maintenance},
	Year = {2012},
	Publisher = {IEEE}
}

=== Wait how many languages? ===

Uh python, ruby, perl, bash and R?
