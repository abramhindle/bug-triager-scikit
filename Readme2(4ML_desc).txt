State of the art methods implemented to compare with our results:

1) 1NN, 3NN and 5NN: In a space with several thousands of dimensions, every word is considered as a dimension. Each bug report is considered a point in this multi-dimensional space. We have all the previous bug reports as points in this space. There are also hyper-planes in this space identified for different classes (developers) so all the points (bug reports) in a hyper-plane belong to a developer. Then, given a new bug report and a corresponding new point in the space, the closest existing point is selected. The class of the selected point (bug report) will be the recommendation for the new bug report. This process is called Nearest Neighbor (1NN). In 3NN and 5NN, we look for 3 or 5 nearest points (bug reports) to that point and simply get their average to determine a hyper-plane and its class (developer) as the recommendation. Lamkanfi, et al. [19] and Anvik [22] used this method for their predictions about bug reports.

2) Naive Bayes: Using the data of previous assignments, the learner assigns each text (bug report) to a class (developer). In fact, the developers’ features are the words included in the textual elements of the bug reports they handled before. These features are considered by the learner as a bag of words. Given a new bug report, the classifier returns the classes (developers) with the highest number features in common with the bug. Bhatacharya et al. [2], [21], Cubrani? c and Murphy [3] and´ Anvik [1] are from those researchers who used this method for bug triaging.

3) Multinomial Naive Bayes: This approach is similar to the above, but it has a Naive Bayes classifier per developer that decides whether the new bug report belongs to that developer or not, and calculates the probability of that being the case. Then, this probability is compared over all the developers to infer the most probable bug fixers. Lamkanfi et al. [19] and Anvik [22] used this method for bug triaging.

4) SVM: This approach represents bug reports as vectors in a multi-dimensional space –similar to 1NN, 3NN and 5NN. Supposing each word is a dimension, this classifier considers each bug report a point in this multidimensional space. Then, considering all the bug reports that are already assigned to each developer as a category, the optimal hyper-planes between these points to separate different categories is inferred. This method also assigns a label (name of a developer) to each category. Then, given a new bug report, it reports the label of its category. Lin et al. [18], Anvik et al. [1] and Bhattacharya et al. [21] used this method for bug triaging.
